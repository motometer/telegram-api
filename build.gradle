buildscript {
    repositories {
        jcenter()
        maven { url "https://plugins.gradle.org/m2/" }
    }
    dependencies {
        classpath 'net.researchgate:gradle-release:2.8.1'
    }
}

plugins {
    id 'java'
    id 'maven'
    id 'signing'
    id 'checkstyle'
    id 'pmd'
    id "net.researchgate.release" version "2.8.1"
}

group = "org.motometer.telegram"
sourceCompatibility = 1.8
targetCompatibility = 1.8

ext.signingKeyFile = "$buildDir/keys/key.gpg"
ext.'signing.keyId' = System.getenv('GPG_KEY_ID')
ext.'signing.secretKeyRingFile' = signingKeyFile
ext.'signing.password' = System.getenv('GPG_PASSWORD')
ext.'ossrhUsername' = System.getenv('OSSRH_USERNAME')
ext.'ossrhPassword' = System.getenv('OSSRH_PASSWORD')

ext.'immutables' = 'org.immutables:value:2.8.3'
ext.'immutablesGson' = 'org.immutables:gson:2.8.3'
ext.'lombok' = 'org.projectlombok:lombok:1.18.20'
ext.'jsr305' = 'com.google.code.findbugs:jsr305:3.0.2'

repositories {
    mavenLocal()
    mavenCentral()
    maven {
        url 'https://maven.pkg.github.com/motometer/telegram-bot-api'
        credentials {
            username = githubUsername
            password = githubToken
        }
    }
}

dependencies {
    compile immutablesGson
    compileOnly jsr305
    compileOnly immutables
    compileOnly lombok

    annotationProcessor immutables
    annotationProcessor lombok

    testCompileOnly lombok
    testCompileOnly jsr305
    testAnnotationProcessor lombok

    testCompile "org.junit.jupiter:junit-jupiter:5.6.0"
    testCompile "org.assertj:assertj-core:3.15.0"
    testCompile "commons-io:commons-io:2.6"
    testCompile 'com.google.code.gson:gson:2.8.6'
}

test {
    useJUnitPlatform()
}

task sourcesJar(type: Jar) {
    archiveClassifier.set('sources')
    from sourceSets.main.allSource
    from "$buildDir/generated/sources/annotationProcessor/java/main"
}

artifacts {
    archives sourcesJar
}

release {
    git {
        requireBranch = 'master'
    }
}

gradle.taskGraph.whenReady { taskGraph ->
    if (taskGraph.allTasks.any { it.name == 'build' || it.name == 'assemble' }) {
        tasks.findAll {
            it.name == 'signArchives' || it.name == 'signDocsJar' || it.name == 'signTestJar'
        }.each { task ->
            task.enabled = false
        }
    }
}

uploadArchives {
    repositories {
        mavenDeployer {
            beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }

            repository(url: "https://oss.sonatype.org/service/local/staging/deploy/maven2/") {
                authentication(userName: ossrhUsername, password: ossrhPassword)
            }

            snapshotRepository(url: "https://oss.sonatype.org/content/repositories/snapshots/") {
                authentication(userName: ossrhUsername, password: ossrhPassword)
            }
            pom.project {
                name = 'Telegram Bot API'
                packaging 'jar'
                description 'Telegram Bot API'
                url = 'https://github.com/motometer/telegram-bot-api'

                scm {
                    connection = 'scm:git:https://github.com/motometer/telegram-bot-api.git'
                    developerConnection = 'scm:git:https://github.com/motometer/telegram-bot-api.git'
                    url = 'https://github.com/motometer/telegram-bot-api'
                }

                licenses {
                    license {
                        name = 'The Apache License, Version 2.0'
                        url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                    }
                }

                developers {
                    developer {
                        id = 'vbychkovskyi'
                        name = 'Viacheslav Bychkovskyi'
                        email = 'vbychkovskyy@gmail.com'
                    }
                }
            }
        }
    }
}

apply plugin: 'maven-publish'

publishing {
    publications {
        maven(MavenPublication) {
            from components.java
        }
    }
    repositories {
        maven {
            url = 'https://maven.pkg.github.com/motometer/telegram-bot-api'
            credentials {
                username = githubUsername
                password = githubToken
            }
            authentication {
                basic(BasicAuthentication)
            }
        }
    }
}


signing {
    sign configurations.archives
}

uploadArchives.dependsOn signArchives

task downloadKey {
    outputs.file("$signingKeyFile")
    doLast {
        def file = new File("$signingKeyFile")
        def keyLocation = System.getenv('GPG_KEY_LOCATION')
        if (!file.exists() && keyLocation != null) {
            new URL(keyLocation)
                    .withInputStream { stream -> file.withOutputStream{ it << stream }}
        }
    }
}

signArchives.dependsOn downloadKey
